{"version":3,"sources":["media/correct.wav","media/incorrect.wav","media/done.wav","media/beep.wav","media/go.wav","components/NewItem.js","components/EditList.js","components/Home.js","components/Game.js","components/AvailableGames.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NewItem","props","inputRef","React","createRef","state","value","submitted","event","this","setState","target","replace","addNewItem","preventDefault","current","focus","Form","className","onSubmit","handleSubmit","bind","Row","Col","FormGroup","Control","type","required","placeholder","onChange","handleChange","ref","Feedback","xs","Button","Component","EditList","nextId","list","id","filter","item","newText","name","concat","addItem","ListGroup","map","Item","key","color","size","onClick","deleteItem","Home","handleOrientation","ori_x","approx","alpha","ori_y","beta","ori_z","gamma","can_play","request_orientation","available_message","Alert","variant","showHelp","window","addEventListener","removeEventListener","toFixed","DeviceOrientationEvent","DeviceMotionEvent","requestPermission","then","response","to","handleRequestOrientationButton","Card","Body","Title","Text","handleShowHelp","playButton","requestOrientationButton","Modal","show","onHide","handleCloseHelp","Header","closeButton","Footer","ReadySetModal","text","audio_beep","Audio","beepSound","audio_go","goSound","play","setTimeout","readySetFinished","GameModal","checkPlay","startTime","Date","now","soundLastPlayed","soundTimeDiff","soundDegreeVar","windowWith","innerWidth","audio_done","doneSound","audio_correct","correctSound","audio_incorrect","incorrectSound","Math","abs","correct","wrong","hours","minutes","seconds","completed","countdownComplete","displayWord","date","onComplete","finished","renderer","clockRenderer","Game","description","allWords","wordsRemaining","guessedCorrect","guessedWrong","guessedWords","phase","currentWord","mdShow","i","floor","random","length","splice","push","pickNextWord","answer","index","resultIcon","result","word","indexOf","pickFirstWord","readySet","parts","location","href","split","that","fetch","process","results","json","data","items","catch","error","console","log","finishedReadSet","gameScreenRef","handleCorrect","handleWrong","timesUp","startGame","onEnter","loadModal","modalBody","finishScreen","startScreen","GameItem","private","AvailableGames","games","workingList","App","Container","Navbar","bg","expand","Brand","as","Link","NavDropdown","title","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4c975104.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correct.ad458e0d.wav\";","module.exports = __webpack_public_path__ + \"static/media/incorrect.67c7dbb8.wav\";","module.exports = __webpack_public_path__ + \"static/media/done.3dff71e5.wav\";","module.exports = __webpack_public_path__ + \"static/media/beep.2822d47e.wav\";","module.exports = __webpack_public_path__ + \"static/media/go.a554b6c0.wav\";","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport Col from 'react-bootstrap/Col';\n\nclass NewItem extends React.Component {\n  constructor(props){\n    super(props);\n    this.inputRef = React.createRef();\n    this.state = {\n      value: '',\n      submitted:false //used to ensure that the focus returns to the input only on submit\n    }\n  }\n\n  handleChange (event) {\n    this.setState({value:event.target.value});\n  };\n\n  handleSubmit(event) {\n    this.setState({value:this.state.value.replace(/\\s/g, \"\")});\n    if (this.state.value.replace(/\\s/g, \"\")){\n      this.props.addNewItem(this.state.value);\n      this.setState({submitted:true});\n    }\n    this.setState({value:\"\"});\n    event.preventDefault();\n  }  \n\n  componentDidUpdate() {\n    if (this.state.submitted) {\n      this.inputRef.current.focus();\n      this.setState({submitted:false});\n    }\n  }\n\n  render() {\n    return (\n      <Form className=\"mt-3\" onSubmit={this.handleSubmit.bind(this)}>\n        <Form.Row>\n          <Col>\n            <FormGroup>\n              <Form.Control \n                type=\"text\" \n                required placeholder=\"Enter new item\" \n                value={this.state.value} \n                onChange={this.handleChange.bind(this)}\n                ref={this.inputRef}\n              >\n              </Form.Control>  \n              <Form.Control.Feedback type=\"invalid\">\n                  Please enter text before adding\n              </Form.Control.Feedback>\n            </FormGroup>\n          </Col>\n          <Col xs={4}>\n            <Button type=\"submit\" >Add</Button> \n          </Col>\n        </Form.Row>\n      </Form>\n    )    \n  }\n}\nexport default NewItem;","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { XSquareFill } from 'react-bootstrap-icons';\nimport NewItem from './NewItem';\n\nclass EditList extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      nextId:0,\n      list: props.list,\n    }\n  }\n\n  deleteItem(id) {\n    this.setState({list:this.state.list.filter(item => item.id !== id)});\n  };\n\n  addItem(newText){\n    this.setState({\n      //list:this.state.list.concat({name:newText, id:this.state.nextId}),\n      list:[{name:newText, id:this.state.nextId}].concat(this.state.list),\n      nextId:this.state.nextId+1\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <NewItem addNewItem={this.addItem.bind(this)} />\n        <ListGroup>\n          {this.state.list.map(item => (\n            <ListGroup.Item key={item.id}>\n              {item.name}\n              <span className=\"float-right\">\n                <XSquareFill color=\"red\" size={30} onClick={() => this.deleteItem(item.id)} />\n              </span>\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </div>\n    )    \n  }\n}\n\nexport default EditList;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport Modal from 'react-bootstrap/Modal';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport {\n  Link\n} from \"react-router-dom\";\n\nclass Home extends React.Component { \n  constructor(props){\n    super(props);\n    this.state = {\n      showHelp:false,\n      can_play:false,\n      request_orientation:true,\n      ori_x:0,\n      ori_y:0,\n      ori_z:0,\n      available_message:<Alert variant=\"info\">You have not requested orietnation yet.</Alert>\n    }\n  }\n\n  handleCloseHelp(){this.setState({showHelp:false});}\n  handleShowHelp() {this.setState({showHelp:true});}\n\n  componentDidMount(){window.addEventListener(\"deviceorientation\", this.handleOrientation);}\n  componentWillUnmount(){window.removeEventListener('deviceorientation', this.handleOrientation);}\n\n  approx(value) {\n    if (value != null){return value.toFixed(2);}\n    return 0; \n  }\n\n  handleOrientation = (event) => {\n    this.setState({\n      ori_x:this.approx(event.alpha),\n      ori_y:this.approx(event.beta),\n      ori_z:this.approx(event.gamma),\n      can_play:true,\n      request_orientation:false,\n      available_message:<Alert variant=\"success\">You are able to play.</Alert>\n    });\n  } \n\n  handleRequestOrientationButton() {\n    if (window.DeviceOrientationEvent) {\n      if (typeof window.DeviceMotionEvent.requestPermission === 'function') {\n        window.DeviceOrientationEvent.requestPermission()\n        .then(response => {\n          if (response === 'granted') {\n            window.addEventListener(\"deviceorientation\", this.handleOrientation);\n          } else {\n            this.setState({\n              available_message:<Alert variant=\"danger\">You need to 'Allow' access to Mation and Orientation for this application to work. You will need to close and re-open the browser to test again</Alert>\n            });            \n          }\n        })\n      } else {\n        this.setState({\n          available_message:<Alert variant=\"warning\">This device has orientation events but you need to check the device settings.  This is often related to the browser app you are using.</Alert>\n        });\n      }\n    } else {\n      this.setState({\n        available_message:<Alert variant=\"danger\">This device has no orientation event. You cannot play.</Alert>\n      });\n    }\n  }\n\n  playButton(){\n    if (this.state.can_play) {\n      return <Link to=\"/game-list\"><Button variant=\"primary\">Check out the lists</Button></Link>\n    } else {\n      return \"\";\n    }\n  }\n\n  requestOrientationButton(){\n    if (this.state.request_orientation) {\n      return (<Button onClick={() => this.handleRequestOrientationButton()} variant=\"dark\">Request orientation access</Button>);\n    } else {\n      return \"\";\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Card>\n          <Card.Body>\n          <Card.Title>What-word-is-that!</Card.Title>\n            <Card.Text>\n              A game of guessing fun for all the family and your crazy friends. <br />\n              <Button variant=\"link\" onClick={() => this.handleShowHelp()}>How to play</Button>\n            </Card.Text>\n            {this.playButton()}<p />\n            <Card.Title>Testing orientation</Card.Title>\n            {this.state.available_message}\n            {this.requestOrientationButton()}<p />\n            <p>\n              The below is showing your devices orientation, which is used to play this game.\n            </p>\n            <ListGroup>\n              <ListGroup.Item>alpha<span className=\"float-right\">{this.state.ori_x}</span></ListGroup.Item>\n              <ListGroup.Item>beta<span className=\"float-right\">{this.state.ori_y}</span></ListGroup.Item>\n              <ListGroup.Item>gamma<span className=\"float-right\">{this.state.ori_z}</span></ListGroup.Item>\n            </ListGroup>\n          </Card.Body>\n        </Card>\n        <Modal show={this.state.showHelp} onHide={this.handleCloseHelp.bind(this)}>\n          <Modal.Header closeButton>\n            <Modal.Title>How to play</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>When you get the game starting<br /><br /> \n            <ul>\n              <li>You will have 3 seconds to place the phone on your forhead facing other people</li>\n              <li>They need make you say the word without saying all or any part of the word</li>\n              <li>If you get it correct, roll the device so it would be face down.  Wait until you here the correct sound, then roll it back up.</li>\n              <li>If you get it incorrect, roll the device so it would be face up.  Wait until you here the incorrect sound, then roll it back down.</li>\n              <li>After 60 seconds, check your score.</li>\n            </ul>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleCloseHelp.bind(this)}>\n              Close\n            </Button>\n          </Modal.Footer>\n        </Modal>        \n      </>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Countdown from 'react-countdown'\nimport Modal from 'react-bootstrap/Modal';\nimport { StarFill, TrashFill } from 'react-bootstrap-icons';\nimport \"./Game.css\"\nimport { Link } from 'react-router-dom';\nimport correctSound from '../media/correct.wav';\nimport incorrectSound from '../media/incorrect.wav';\nimport doneSound from '../media/done.wav';\nimport beepSound from '../media/beep.wav';\nimport goSound from '../media/go.wav';\n\nclass ReadySetModal extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      text:\"Ready\",\n      audio_beep:new Audio(beepSound),\n      audio_go:new Audio(goSound),\n    }\n  } \n\n  componentDidMount(){\n    this.state.audio_beep.play();\n    setTimeout(() => {\n      this.state.audio_beep.play();\n      this.setState({text:\"Set\"});\n      setTimeout(() => {\n        this.state.audio_beep.play();\n        this.setState({text:\"Go\"});\n        setTimeout(() => {\n          this.state.audio_go.play();\n          this.props.readySetFinished();\n        }, 1000)\n      },1000);\n    }, 1000);\n  }\n\n  render(){\n    return (\n      <>\n        <br />\n        <h1>{this.state.text}</h1>\n        <br /><br />\n      </>\n    )\n  }\n}\nclass GameModal extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      startTime:Date.now() + 60000,\n      soundLastPlayed:new Date(),\n      soundTimeDiff:2000,\n      soundDegreeVar:20,\n      ori_x:0,\n      ori_y:0,\n      ori_z:0,\n      windowWith: window.innerWidth,\n      audio_done:new Audio(doneSound),\n      audio_correct:new Audio(correctSound),\n      audio_incorrect:new Audio(incorrectSound)\n    }\n  }\n\n  //Handles the phone orientation\n  componentDidMount(){\n    window.addEventListener(\"deviceorientation\", this.handleOrientation);\n  }\n  componentWillUnmount(){\n    window.removeEventListener(\"deviceorientation\", this.handleOrientation);\n  }\n  approx(value) {\n    if (value != null){return value.toFixed(2);}\n    return 0; \n  }\n  handleOrientation = (event) => {\n    this.setState({\n      ori_x:this.approx(event.alpha),\n      ori_y:this.approx(event.beta),\n      ori_z:this.approx(event.gamma)\n    });\n    this.checkPlay();\n  } \n\n  checkPlay(){\n    if ((new Date() - this.state.soundLastPlayed)>this.state.soundTimeDiff){\n      //Its been soundTimeDiff/1000 seconds since tune was played\n      if ((Math.abs(this.state.ori_y) > (180-this.state.soundDegreeVar)) && ((Math.abs(this.state.ori_z) < (0+this.state.soundDegreeVar)))){\n          //When phone sideways, y is near 180, z is near 0 - phone tilted forward\n          this.setState({soundLastPlayed:new Date()});\n          this.state.audio_correct.play();\n          this.props.correct();\n      }\n      if ((Math.abs(this.state.ori_y) < (0+this.state.soundDegreeVar)) && ((Math.abs(this.state.ori_z) < (0+this.state.soundDegreeVar)))){\n        //When phone sideways, y is near 0, z is near 0\n        this.setState({soundLastPlayed:new Date()});\n        this.state.audio_incorrect.play();\n        this.props.wrong();\n      }\n    }\n  }\n\n  clockRenderer ({ hours, minutes, seconds, completed }) {\n    if (completed) {\n      // Render a completed state\n      return <span>Done</span>;\n    } else {\n      // Render a countdown\n      if (minutes >= 1){\n        return <span>{minutes} minutes : {seconds} seconds</span>;\n      } else {\n        return <span>{seconds} seconds</span>;\n      }\n    }\n  };\n\n  finished() {\n    this.state.audio_done.play();\n    this.props.countdownComplete();\n  }\n\n  render(){\n    return (\n      <>\n        <br />\n        <h1>{this.props.displayWord}</h1>\n        {\"Time remaining: \"}\n        <Countdown \n          date={this.state.startTime} \n          onComplete={this.finished.bind(this)}\n          renderer={this.clockRenderer}/>\n        <br /><br />\n      </>\n    )\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      id: '',\n      name: '',\n      description: '',\n      allWords: [],\n      wordsRemaining: [],\n      guessedCorrect:0,\n      guessedWrong:0,\n      guessedWords:[],\n      phase:\"screen\",\n      currentWord:\"\",\n      mdShow:false,\n\n    }\n  }\n\n  timesUp() {\n    this.setState({\n      phase:\"finished\",\n      mdShow:false,\n    });\n  }\n\n  pickFirstWord() {\n    let i = Math.floor(Math.random() * Math.floor(this.state.allWords.length));\n    return this.state.allWords[i]\n  }\n\n  pickNextWord(){\n    if (this.state.wordsRemaining.length === 0){\n      this.setState({currentWord:\"No more words in list!\"})\n    } else {\n      let i = Math.floor(Math.random() * Math.floor(this.state.wordsRemaining.length));\n      this.setState({currentWord:this.state.wordsRemaining[i]})\n      this.state.wordsRemaining.splice(i,1);\n    }\n  }\n\n  handleCorrect() {\n    this.state.guessedWords.push({\"word\":this.state.currentWord, \"result\":true});\n    this.setState({guessedCorrect:this.state.guessedCorrect+1});\n    this.pickNextWord();\n  }\n\n  handleWrong() {\n    this.state.guessedWords.push({\"word\":this.state.currentWord, \"result\":false})\n    this.setState({guessedWrong:this.state.guessedWrong+1});\n    this.pickNextWord();\n  }\n\n  resultIcon(answer) {\n    return (answer ? <StarFill className=\"text-success sz-md\" /> : <TrashFill className=\"text-danger\" />);\n  }\n\n  finishScreen() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>{this.state.name}</Card.Title>\n          <h2>Score : {this.state.guessedCorrect}</h2>\n          <p>\n            {this.state.guessedWords.map((item,index) => (\n              <span key={index}>\n                {this.resultIcon(item.result)} {item.word}<br />\n              </span>\n            ))}\n          </p>\n          <Button variant=\"primary\" onClick={() => this.setState({phase:\"screen\"})}>Play again</Button>{\" \"}\n          <Link to=\"/game-list\"><Button variant=\"primary\">Play other lists</Button></Link>\n        </Card.Body>\n      </Card>\n    )\n  }\n\n  loadModal(){\n    let i = this.state.wordsRemaining.indexOf(this.state.currentWord);\n    this.state.wordsRemaining.splice(i,1);\n  }\n\n  startGame() {\n    //Clear the slate and show the modal with the first word\n\n    this.setState({\n      guessedWords:[],\n      wordsRemaining:[].concat(this.state.allWords),\n      currentWord:this.pickFirstWord(),\n      guessedCorrect:0,\n      guessedWrong:0,\n      mdShow:true,\n      readySet:true\n    });\n  }\n\n  componentDidMount() {\n    let parts = window.location.href.split('?id=');\n    let id = parts[parts.length-1];\n    let that = this;\n    fetch(`${process.env.REACT_APP_URL}/api/get?id=${id}`)\n    .then(results => {return results.json()})\n    .then(data => {  \n      that.setState({id: id, name: data.name, description: data.description, allWords: data.items.split(\",\")});\n    }).catch(function(error) {\n      console.log('Fetch has failed so defaulting in some data for local testing.');\n      let data = {\"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACQw\":{\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACQw\", \"private\": false, \"name\": \"Cats\", \"description\": \"Purrrrrrrrr\", \"items\": \"Abyssinian,Aegean,American Bobtail,American Curl,American Shorthair,American Wirehair,Aphrodite Giant,Arabian Mau,Asian cat,Asian Semi-longhair,Australian Mist,Balinese,Bambino,Bengal,Birman,Bombay,Brazilian Shorthair,British Longhair,British Shorthair,Burmese,Burmilla,California Spangled,Chantilly-Tiffany,Chartreux,Chausie,Colourpoint Shorthair,Cornish Rex,Cymric,Longhaired Manx,Cyprus,Devon Rex,Donskoy,Don Sphynx,Dragon Li,Dwelf,Egyptian Mau,European Shorthair,Exotic Shorthair,Foldex,German Rex,Havana Brown,Highlander,Himalayan,Japanese Bobtail,Javanese,Khao Manee,Korat,Korean Bobtail,Korn Ja,Kurilian Bobtail\\u00a0or,Kuril Islands Bobtail,LaPerm,Lykoi,Maine Coon,Manx,Mekong Bobtail,Minskin,Napoleon,Munchkin,Nebelung,Norwegian Forest Cat,Ocicat,Ojos Azules,Oregon Rex,Oriental Bicolor,Oriental Longhair,Oriental Shorthair,Persian,Peterbald,Pixie-bob,Ragamuffin,Ragdoll,Raas,Russian Blue,Russian White,Black,and Tabby,Sam sawet,Savannah,Scottish Fold,Selkirk Rex,Serengeti,Serrade Petit,Siberian,Neva Masquerade,Singapura,Snowshoe,Sokoke,Somali,Sphynx,Suphalak,Thai,Thai Lilac,Tonkinese,Toyger,Turkish Angora,Turkish Van,Ukrainian Levkoy,Wila Krungthep,York Chocolate\"},\n                  \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACgw\":{\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACgw\", \"private\": false, \"name\": \"Dogs\", \"description\": \"Doggies\", \"items\": \"Labrador Retrievers,German Shepherd Dogs,Golden Retrievers,French Bulldogs,Bulldogs,Beagles,Poodles,Rottweilers,German Shorthaired Pointers,Yorkshire Terriers,Boxers,Dachshunds,Pembroke Welsh Corgis,Siberian Huskies,Australian Shepherds,Great Danes,Doberman Pinschers,Cavalier King Charles Spaniels,Miniature Schnauzers,Shih Tzu,Boston Terriers,Bernese Mountain Dogs,Pomeranians,Havanese,Shetland Sheepdogs,Brittanys,English Springer Spaniels,Pugs,Mastiffs,Cocker Spaniels,Vizslas,Cani Corsi,Chihuahuas,Miniature American Shepherds,Border Collies,Weimaraners,Maltese,Collies,Basset Hounds,Newfoundlands,Rhodesian Ridgebacks,West Highland White Terriers,Belgian Malinois,Shiba Inu,Chesapeake Bay Retrievers,Bichon Frises,Akitas,St. Bernards\"},};\n      that.setState({id: id, name: data[id].name, description: data[id].description, allWords: data[id].items.split(\",\")});\n    });\n  }\n\n  finishedReadSet(){\n    this.setState({readySet:false})\n  }\n\n  modalBody(){\n    if (this.state.readySet){\n      return <ReadySetModal readySetFinished={this.finishedReadSet.bind(this)}/>\n    } else {\n      return <GameModal \n          ref={this.gameScreenRef}\n          correct={this.handleCorrect.bind(this)}\n          wrong={this.handleWrong.bind(this)}\n          displayWord={this.state.currentWord}\n          countdownComplete={this.timesUp.bind(this)}\n        />\n    }\n  }\n\n  startScreen() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>{this.state.name}</Card.Title>\n          <Card.Text>\n            {this.state.description}\n          </Card.Text>\n          <Button variant=\"primary\" onClick={() => this.startGame()}>Play</Button>\n        </Card.Body>\n        <Modal\n          size=\"lg\"\n          show={this.state.mdShow}\n          onHide={() => this.setState({mdShow:false})}\n          onEnter={this.loadModal.bind(this)}\n        >\n          <Modal.Body>\n            {this.modalBody()}\n          </Modal.Body>\n        </Modal>\n      </Card>\n    )  \n  }\n\n  render() {\n    switch (this.state.phase) {\n      case \"finished\":\n        return this.finishScreen();\n      default:\n        return this.startScreen();\n    }  \n  }\n}\nexport default Game;","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport {Link} from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\nimport {ChevronRight} from 'react-bootstrap-icons';\n\nclass GameItem extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      key:this.props.id,\n      description:this.props.description,\n      name:this.props.name,\n      private:this.props.private\n    }\n  }  \n  render() {\n    return(\n      <ListGroup.Item>{this.state.name}\n        <span className=\"float-right\">\n        <Link to={`/play?id=${this.state.key}`}>\n          <ChevronRight /><ChevronRight />\n          </Link>\n        </span>\n      </ListGroup.Item>\n    );\n  }\n}\n\nclass AvailableGames extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      games:[]\n    }\n  }\n\n  componentDidMount(){\n    let that = this;\n    fetch(process.env.REACT_APP_URL+'/api/search')\n    .then(results => {\n      return results.json()})\n    .then(data => {\n      that.setState({games:data}); \n    }).catch(function(error) {\n      console.log('Fetch has failed so defaulting in some data for local testing.');\n      let data = [{\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACQw\", \"private\": false, \"name\": \"Cats\", \"description\": \"Purrrrrrrrr\"}, {\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACgw\", \"private\": false, \"name\": \"Dogs\", \"description\": \"Doggies\"}];\n      that.setState({games:data}); \n   });\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <ListGroup>\n            {this.state.games.map((item) => <GameItem \n                                              id={item.key}\n                                              key={item.key}\n                                              name={item.name}\n                                              description={item.description}\n                                              private={item.private}\n                                              />)}\n          </ListGroup>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default AvailableGames;","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport EditList from './components/EditList';\nimport Home from './components/Home';\nimport Game from './components/Game';\nimport AvailableGames from './components/AvailableGames';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\n/**\n * \n * ==== Rebuilding this app from scratch ====\n * npm install react-bootstrap bootstrap\n * npm install react-bootstrap-icons --save\n * npm install react-router-dom\n * \n * \n * === Heavily relied upon references\n * https://react-bootstrap.github.io/getting-started/introduction\n * https://www.robinwieruch.de/react-list-component\n * https://icons.getbootstrap.com/\n * https://reacttraining.com/react-router/web/guides/quick-start\n * https://freesound.org/ for my sounds\n * \n * \n * === Google Cloud Deploy ===\n * Copy build directory to read (this project) and edit (authenticated project) in the GAE project\n * \n * == Manual ==\n * gcloud config set project what-word-is-that\n * gcloud app deploy #in the directory with the app.yaml\n * https://what-word-is-that.appspot.com/\n * gcloud app deploy index.yaml #I had trouble with indexes not deploying - maybe run this and wait. Hopefully auto-deploy working\n * \n * == Automated ==\n * Now running through auto-build on commit to GitHub\n * https://cloud.google.com/source-repositories/docs/quickstart-triggering-builds-with-source-repositories\n * https://console.cloud.google.com/cloud-build/dashboard?project=what-word-is-that\n * \n * \n */\n\n /** TODO\n * - Create sets of lists to use for the game as test data and mocking gets that are not part of the build\n * - Create game probabaly as modal full screen???????\n * - Method for pulling test data and real data into the application\n * - Updating the data\n */\n\nconst workingList = [{id:'a', name:'Mickey Mouse'}, {id:'b', name:'Donald Duck'}, {id:'c', name:'Goofy'}];\n\nclass App extends React.Component{\n  render() {\n    return (\n      <Router>\n        <Container>\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand as={Link} to=\"/\">Guess words!</Navbar.Brand>\n            <NavDropdown title=\"Options\" id=\"basic-nav-dropdown\" className=\"nav-item dropdown ml-auto\">\n              <NavDropdown.Item as={Link} to=\"/\">Home</NavDropdown.Item>\n              <NavDropdown.Item href=\"/edit/\">Manage my lists</NavDropdown.Item>\n            </NavDropdown>\n          </Navbar>\n          {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/login\">\n              <EditList list={workingList}/>\n            </Route>\n            <Route path=\"/play\">\n              <Game />\n            </Route>\n            <Route path=\"/game-list\">\n              <AvailableGames />\n            </Route>           \n            <Route path=\"/temp-play\">\n              <Game />\n            </Route>               \n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}