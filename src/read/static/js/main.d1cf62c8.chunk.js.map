{"version":3,"sources":["images/home.jpg","components/NewItem.js","components/EditList.js","components/Home.js","components/Game.js","components/AvailableGames.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NewItem","props","inputRef","React","createRef","state","value","submitted","event","this","setState","target","replace","addNewItem","preventDefault","current","focus","Form","className","onSubmit","handleSubmit","bind","Row","Col","FormGroup","Control","type","required","placeholder","onChange","handleChange","ref","Feedback","xs","Button","Component","EditList","nextId","list","id","filter","item","newText","name","concat","addItem","ListGroup","map","Item","key","color","size","onClick","deleteItem","Home","Card","Img","variant","src","HomeImage","style","width","Body","Title","Text","to","GameScreen","startTime","Date","now","hours","minutes","seconds","completed","displayWord","date","onComplete","countdownComplete","renderer","clockRenderer","correct","wrong","Game","description","allWords","wordsRemaining","guessedCorrect","guessedWrong","guessedWords","phase","currentWord","mdShow","i","Math","floor","random","length","splice","push","pickNextWord","answer","index","resultIcon","result","word","indexOf","pickFirstWord","parts","window","location","href","split","data","title","words","startGame","Modal","show","onHide","onEnter","loadModal","gameScreenRef","handleCorrect","handleWrong","timesUp","finishScreen","startScreen","GameItem","AvailableGames","games","loadingGames","workingList","App","Container","Navbar","bg","expand","Brand","as","Link","NavDropdown","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1cf62c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.be7e024f.jpg\";","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport Col from 'react-bootstrap/Col';\n\nclass NewItem extends React.Component {\n  constructor(props){\n    super(props);\n    this.inputRef = React.createRef();\n    this.state = {\n      value: '',\n      submitted:false //used to ensure that the focus returns to the input only on submit\n    }\n  }\n\n  handleChange (event) {\n    this.setState({value:event.target.value});\n  };\n\n  handleSubmit(event) {\n    this.setState({value:this.state.value.replace(/\\s/g, \"\")});\n    if (this.state.value.replace(/\\s/g, \"\")){\n      this.props.addNewItem(this.state.value);\n      this.setState({submitted:true});\n    }\n    this.setState({value:\"\"});\n    event.preventDefault();\n  }  \n\n  componentDidUpdate() {\n    if (this.state.submitted) {\n      this.inputRef.current.focus();\n      this.setState({submitted:false});\n    }\n  }\n\n  render() {\n    return (\n      <Form className=\"mt-3\" onSubmit={this.handleSubmit.bind(this)}>\n        <Form.Row>\n          <Col>\n            <FormGroup>\n              <Form.Control \n                type=\"text\" \n                required placeholder=\"Enter new item\" \n                value={this.state.value} \n                onChange={this.handleChange.bind(this)}\n                ref={this.inputRef}\n              >\n              </Form.Control>  \n              <Form.Control.Feedback type=\"invalid\">\n                  Please enter text before adding\n              </Form.Control.Feedback>\n            </FormGroup>\n          </Col>\n          <Col xs={4}>\n            <Button type=\"submit\" >Add</Button> \n          </Col>\n        </Form.Row>\n      </Form>\n    )    \n  }\n}\nexport default NewItem;","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { XSquareFill } from 'react-bootstrap-icons';\nimport NewItem from './NewItem';\n\nclass EditList extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      nextId:0,\n      list: props.list,\n    }\n  }\n\n  deleteItem(id) {\n    this.setState({list:this.state.list.filter(item => item.id !== id)});\n  };\n\n  addItem(newText){\n    this.setState({\n      //list:this.state.list.concat({name:newText, id:this.state.nextId}),\n      list:[{name:newText, id:this.state.nextId}].concat(this.state.list),\n      nextId:this.state.nextId+1\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <NewItem addNewItem={this.addItem.bind(this)} />\n        <ListGroup>\n          {this.state.list.map(item => (\n            <ListGroup.Item key={item.id}>\n              {item.name}\n              <span className=\"float-right\">\n                <XSquareFill color=\"red\" size={30} onClick={() => this.deleteItem(item.id)} />\n              </span>\n            </ListGroup.Item>\n          ))}\n        </ListGroup>\n      </div>\n    )    \n  }\n}\n\nexport default EditList;","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport HomeImage from '../images/home.jpg';\nimport {\n  Link\n} from \"react-router-dom\";\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <Card>\n        <Card.Img variant=\"top\" src={HomeImage} style={{ width: '18rem' }} />\n        <Card.Body>\n          <Card.Title>Word guessing game</Card.Title>\n          <Card.Text>\n            A game of guessing fun for all the family and your crazy friends.\n          </Card.Text>\n          <Link to=\"/game-list\"><Button variant=\"primary\">Get started</Button></Link>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Countdown from 'react-countdown'\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Modal from 'react-bootstrap/Modal';\nimport { StarFill, TrashFill } from 'react-bootstrap-icons';\nimport \"./Game.css\"\nimport { Link } from 'react-router-dom';\n\nclass GameScreen extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      startTime:Date.now() + 15000\n    }\n  }\n\n  clockRenderer ({ hours, minutes, seconds, completed }) {\n    if (completed) {\n      // Render a completed state\n      return <span>Done</span>;\n    } else {\n      // Render a countdown\n      return <span>{minutes}:{seconds}</span>;\n    }\n  };\n\n  render(){\n    return (\n      <>\n        <center>\n          <h1>{this.props.displayWord}</h1>\n          {\"Time remaining: \"}\n          <Countdown \n            date={this.state.startTime} \n            onComplete={this.props.countdownComplete}\n            renderer={this.clockRenderer}/>\n        </center>\n        <br />\n        <Row>\n          <Col>\n            <Button variant=\"outline-success\" className=\"btn-block\" onClick={() => this.props.correct()}>Correct</Button> {\" \"}\n          </Col>\n          <Col>\n            <Button variant=\"outline-danger\"  className=\"btn-block\" onClick={() => this.props.wrong()}>Wrong</Button>\n          </Col>\n        </Row>\n      </>\n    )\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      id: '1',\n      name: 'Silmarillion words',\n      description: 'Words from the Tolkein book the Silmarillion.',\n      allWords: ['Morgoth', \"Feanor\", \"Fingolfin\", \"Ungoliant\", \"Eren and Luthian\", \"Bleesed Isles\", \"Sauron\", \"Balrog\", \"Glaurung\"],\n      wordsRemaining: [],\n      guessedCorrect:0,\n      guessedWrong:0,\n      guessedWords:[],\n      phase:\"screen\",\n      currentWord:\"\",\n      mdShow:false,\n    }\n  }\n\n  timesUp() {\n    this.setState({\n      phase:\"finished\",\n      mdShow:false,\n    });\n  }\n\n  pickFirstWord() {\n    let i = Math.floor(Math.random() * Math.floor(this.state.allWords.length));\n    return this.state.allWords[i]\n  }\n\n  pickNextWord(){\n    if (this.state.wordsRemaining.length === 0){\n      this.setState({currentWord:\"No more words in list!\"})\n    } else {\n      let i = Math.floor(Math.random() * Math.floor(this.state.wordsRemaining.length));\n      this.setState({currentWord:this.state.wordsRemaining[i]})\n      this.state.wordsRemaining.splice(i,1);\n    }\n  }\n\n  handleCorrect() {\n    this.state.guessedWords.push({\"word\":this.state.currentWord, \"result\":true});\n    this.setState({guessedCorrect:this.state.guessedCorrect+1});\n    this.pickNextWord();\n  }\n\n  handleWrong() {\n    this.state.guessedWords.push({\"word\":this.state.currentWord, \"result\":false})\n    this.setState({guessedWrong:this.state.guessedWrong+1});\n    this.pickNextWord();\n  }\n\n  resultIcon(answer) {\n    return (answer ? <StarFill className=\"text-success sz-md\" /> : <TrashFill className=\"text-danger\" />);\n  }\n\n  finishScreen() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>{this.state.name}</Card.Title>\n          <h2>Score : {this.state.guessedCorrect}</h2>\n          <p>\n            {this.state.guessedWords.map((item,index) => (\n              <span key={index}>\n                {this.resultIcon(item.result)} {item.word}<br />\n              </span>\n            ))}\n          </p>\n          <Button variant=\"primary\" onClick={() => this.setState({phase:\"screen\"})}>Play again</Button>{\" \"}\n          <Link to=\"/game-list\"><Button variant=\"primary\">Play other lists</Button></Link>\n        </Card.Body>\n      </Card>\n    )\n  }\n\n  loadModal(){\n    let i = this.state.wordsRemaining.indexOf(this.state.currentWord);\n    this.state.wordsRemaining.splice(i,1);\n  }\n\n  startGame() {\n    //Clear the slate and show the modal with the first word\n\n    this.setState({\n      guessedWords:[],\n      wordsRemaining:[].concat(this.state.allWords),\n      currentWord:this.pickFirstWord(),\n      guessedCorrect:0,\n      guessedWrong:0,\n      mdShow:true\n    });\n  }\n\n componentDidMount() {\n   let parts = window.location.href.split('/');\n   let id = parts[parts.length-1];\n   //Get the data\n   let data = {\"1\":{\"title\":\"Silmarillion\", \"description\":\"Words from the silmarillion.  For people beyond LOTR!\",\"words\":[\n        'Morgoth', \"Feanor\", \"Fingolfin\", \"Ungoliant\", \"Beren and Luthian\", \"Bleesed Isles\", \"Sauron\", \"Balrog\", \"Glaurung\"\n      ]},\n      \"2\":{\"title\":\"Disney\", \"description\":\"Disney words from the movies and books\",\"words\":[\n        \"101 Dalmatians\", \"A Bug's Life\", \"A Whole New World\", \"Adventureland\", \"Aladdin\", \"Alice In Wonderland\", \"Anastasia\", \"Animation\", \"Anna\", \"Arandelle\", \"Ariel\", \"Aurora\", \"Bambi\", \"Bare Necessities\", \"Bashful\", \"Baymax\", \"Be My Guest\", \"Beauty And The Beast\", \"Bedknobs and Broomsticks\", \"Belle\", \"Big Hero 6\", \"Brave\", \"Buzz Lightyear\", \"Cars\", \"Cars\", \"Cartoon\", \"Castle\", \"Christopher Robin\", \"Cinderella\", \"Circle Of Life\", \"Clubhouse\", \"Cruel De Ville\", \"Disney Store\", \"Disneyland Paris\", \"Disneyworld\", \"Doc\", \"Donald Duck\", \"Dopey\", \"Dory\", \"Dumbo\", \"Eeyore\", \"Elastigirl\", \"Elsa\", \"Emperor's New Groove\", \"Enchanted\", \"Esmerelda\", \"Fantasia\", \"Fantasyland\", \"Finding Nemo\", \"Fireworks\", \"Frontierland\", \"Frozen\", \"Gepetto\", \"Giselle\", \"Goofy\", \"Grumpy\", \"Hakuna matata\", \"Hannah Montana\", \"Happy\", \"High School Musical\", \"Inside Out\", \"It's A Small World\", \"Jack Sparrow\", \"Jasmine\", \"Jessica Rabbit\", \"Jiminy Cricket\", \"Lady And The Tramp\", \"Let It Go\", \"Lightning McQueen\", \"Lilo\", \"Lion King\", \"Little Mermaid\", \"Magic Kingdom\", \"Main Street Parade\", \"March Hare\", \"Mary Poppins\", \"Maui\", \"Merida\", \"Mickey Mouse\", \"Mike\", \"Minnie Mouse\", \"Moana\", \"Monsters Inc.\", \"Mr. Potato Head\", \"Nemo\", \"Neverland\", \"Nightmare Before Christmas\", \"Olaf\", \"One Of Our Dinosaurs Is Missing\", \"Parade\", \"Peter Pan\", \"Peter Pan\", \"Phineas And Ferb\", \"Piglet\", \"Pinocchio\", \"Pirates Of The Caribbean\", \"Pixar\", \"Pluto\", \"Pocahontas\", \"Pooh\", \"Princess\", \"Pumbaa\", \"Rapunzel\", \"Ride\", \"Robin Hood\", \"Roger Rabbit\", \"Scrooge McDuck\", \"Seven Dwarfs\", \"Simba\", \"Sleeping Beauty\", \"Sleepy\", \"Sneezy\", \"Someday My Prince Will Come\", \"Stitch\", \"Sully\", \"Supercalifragilisticexpealidocious\", \"The Aristocats\", \"The Fox And The Hound\", \"The Incredibles\", \"The Jungle Book\", \"The Princess Diaries\", \"Tiana\", \"Tigger\", \"Tinker Bell\", \"Tomorrowland\", \"Toon\", \"Tour Guide Barbie\", \"Toy Story\", \"Tron\", \"Tweedledum\", \"Up\", \"Walt\", \"Walt Disney\", \"Wendy Darling\", \"When You Wish Upon A Star\", \"White Rabbit\", \"Wicked Stepmother\", \"Winnie The Pooh\", \"Wizards Of Waverly Place\", \"Woody\", \"XD\", \"You've Got A Friend In Me\", \"Zip A Dee Doo Dah!\"\n      ]},\n      \"3\":{\"title\":\"Fortnite\", \"description\":\"The game fortnite is huge, these words are from it\",\"words\":[\n        \"Beef Boss\",\"Big Pot\", \"Bandies\", \"Minny's\", \"Pump\", \"90's\"\n      ]},\n      \"4\":{ \"title\":\"Garfield\", \"description\":\"Words fromt he lovable cartoon Garfield\",\"words\":[\n        \"Garfield\",\"Odie\",\"Jon\",\"Nermal\", \"Lasagne\", \"I hate Mondays\", \"Arlene\",\"Fat\", \"Cat\", \"Vito\", \"Squeak\", \"Food\", \"Jim Davis\"\n      ]},\n      \"5\":{ \"title\":\"Animals\", \"description\":\"All sorts of crazy animals, bbet you don't know some.\",\"words\":[\n        \"Arctic Wolf\", \"Caiman\", \"Crocodile\", \"Grizzly Bear\", \"Hippopotamus\", \"Jaguar\", \"Killer Whale\", \"Komodo Dragon\", \"Puffer Fish\", \"Snapping Turtle\", \"Stingray\", \"Tiger\", \"Tiger Shark\", \"Bearded Collie\", \"Bearded Dragon\", \"Cat\", \"Chinchilla\", \"Cow\", \"Duck\", \"Gecko\", \"Guinea Pig\", \"Hamster\", \"Irish WolfHound\", \"Antelope\", \"Arctic Fox\", \"Bengal Tiger\", \"Caracal\", \"Chameleon\", \"Cheetah\", \"Giraffe\", \"Howler Monkey\", \"Koala\", \"Lion\", \"Millipede\", \"Mountain Lion\", \"Panther\", \"Prawn\", \"Red Panda\", \"Rhinoceros\", \"Amur Leopard\", \"Aye Aye\", \"Clouded Leopard\", \"Giant Panda Bear\", \"Ocelot\", \"Okapi\", \"Polar Bear\", \"Proboscis Monkey\", \"River Dolphin\", \"Sloth\", \"Tapanuli Orang-utan\", \"White Tiger\"\n      ]},\n    };\n    this.setState({\n      id: id,\n      name: data[id].title,\n      description: data[id].description,\n      allWords: data[id].words,\n    });\n }\n\n  startScreen() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>{this.state.name}</Card.Title>\n          <Card.Text>{this.state.description}</Card.Text>\n          <Button variant=\"primary\" onClick={() => this.startGame()}>Play</Button>\n        </Card.Body>\n        <Modal\n          size=\"lg\"\n          show={this.state.mdShow}\n          onHide={() => this.setState({mdShow:false})}\n          onEnter={this.loadModal.bind(this)}\n        >\n          <Modal.Body>\n            <GameScreen \n              ref={this.gameScreenRef}\n              correct={this.handleCorrect.bind(this)}\n              wrong={this.handleWrong.bind(this)}\n              displayWord={this.state.currentWord}\n              countdownComplete={this.timesUp.bind(this)}\n            />\n          </Modal.Body>\n        </Modal>\n      </Card>\n    )  \n  }\n\n  render() {\n    switch (this.state.phase) {\n      case \"finished\":\n        return this.finishScreen();\n      default:\n        return this.startScreen();\n    }  \n  }\n}\nexport default Game;","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport {Link} from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\nimport {ChevronRight} from 'react-bootstrap-icons';\n\nclass GameItem extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      id:this.props.id,\n      description:this.props.description,\n      title:this.props.title\n    }\n  }  \n  render() {\n    return(\n      <ListGroup.Item>{this.state.title}\n        <span className=\"float-right\">\n        <Link to={`/play/${this.state.id}`}>\n          <ChevronRight />\n          </Link>\n        </span>\n        \n      </ListGroup.Item>\n    );\n  }\n}\n\nclass AvailableGames extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      games:[]\n    }\n  }\n\n  componentDidMount(){\n    //end state will be using fetch etc.\n    let data = [{\"id\":\"1\", \"title\":\"Silmarillion\", \"description\":\"Words from the silmarillion.  For people beyond LOTR!\"},\n                {\"id\":\"2\", \"title\":\"Disney\", \"description\":\"Disney words from the movies and books\"},\n                {\"id\":\"3\", \"title\":\"Fortnite\", \"description\":\"The game fortnite is huge, these words are from it\"},\n                {\"id\":\"4\", \"title\":\"Garfield\", \"description\":\"Words fromt he lovable cartoon Garfield\"},\n                {\"id\":\"5\", \"title\":\"Animals\", \"description\":\"All sorts of crazy animals, bbet you don't know some\"},\n                ];\n    \n    let loadingGames = data.map((item) => { \n      return (<GameItem \n        id={item.id} \n                key={`${item.id}`} \n                title={item.title} \n                description={item.description} \n              />)\n    })\n    this.setState({games:loadingGames});\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <ListGroup>\n            {this.state.games.map((item) => item)}\n          </ListGroup>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default AvailableGames;","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport EditList from './components/EditList';\nimport Home from './components/Home';\nimport Game from './components/Game';\nimport AvailableGames from './components/AvailableGames';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\n\n/**\n * \n * ==== Rebuilding this app from scratch ====\n * npm install react-bootstrap bootstrap\n * npm install react-bootstrap-icons --save\n * npm install react-router-dom\n * \n * \n * === Heavily relied upon references\n * https://react-bootstrap.github.io/getting-started/introduction\n * https://www.robinwieruch.de/react-list-component\n * https://icons.getbootstrap.com/\n * https://reacttraining.com/react-router/web/guides/quick-start\n * \n * \n * === Google Cloud Deploy\n * Copy build directory to src/build in the GAE project\n * gcloud config set project what-word-is-that\n * gcloud app deploy\n * https://what-word-is-that.appspot.com/\n * \n */\n\n /** TODO\n * - Create sets of lists to use for the game as test data and mocking gets that are not part of the build\n * - Create game probabaly as modal full screen???????\n * - Method for pulling test data and real data into the application\n * - Updating the data\n */\n\nconst workingList = [{id:'a', name:'Mickey Mouse'}, {id:'b', name:'Donald Duck'}, {id:'c', name:'Goofy'}];\n\nclass App extends React.Component{\n  render() {\n    return (\n      <Router>\n        <Container>\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand as={Link} to=\"/\">Guess words!</Navbar.Brand>\n            <NavDropdown title=\"Options\" id=\"basic-nav-dropdown\" className=\"nav-item dropdown ml-auto\">\n              <NavDropdown.Item as={Link} to=\"/\">Home</NavDropdown.Item>\n              <NavDropdown.Item as={Link} to=\"/login\">Login</NavDropdown.Item>\n            </NavDropdown>\n          </Navbar>\n          {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/login\">\n              <EditList list={workingList}/>\n            </Route>\n            <Route path=\"/play/:id\">\n              <Game />\n            </Route>\n            <Route path=\"/game-list\">\n              <AvailableGames />\n            </Route>           \n            <Route path=\"/temp-play\">\n              <Game />\n            </Route>               \n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}