{"version":3,"sources":["components/CreateNewList.js","App.js","serviceWorker.js","index.js"],"names":["ListSaved","Card","Body","React","Component","CreateNewList","props","handleSubmit","event","currentTarget","checkValidity","stopPropagation","fetch","process","method","body","JSON","stringify","state","then","response","json","jsonData","setState","saved","validated","preventDefault","updateName","name","target","value","updateDescription","description","updateItems","allItems","replace","trim","split","map","x","items","join","updatePrivate","private","checked","this","Form","noValidate","onSubmit","Row","Group","controlId","Label","Control","placeholder","required","type","onChange","Feedback","as","rows","id","Check","label","Button","Home","Title","Img","variant","src","style","width","to","App","basename","Container","Navbar","bg","expand","Brand","Link","NavDropdown","title","className","Item","href","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56ef9e76.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\nclass ListSaved extends React.Component {\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          Well Saved!\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nclass CreateNewList extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      validated:false,\n      saved:false,\n      name:\"\",\n      description:\"\",\n      items:\"\",\n      private: false\n    }\n  }\n\n  handleSubmit = event => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    } else {\n      fetch(process.env.REACT_APP_URL+'/edit/api/save', {\n        method: 'POST',\n        body: JSON.stringify(this.state),\n      }).then((response) => {\n        return response.json();\n      }).then((jsonData) => {\n        this.setState({saved:true});\n      });\n    }\n    this.setState({validated:true}); //Don't undert=stand how for validation works, but it isnice magic juju\n    event.preventDefault(); //We actuyally never want it to submit, we handle success in the else branch\n  };\n\n  updateName = (event) => {event.preventDefault(); this.setState({name:event.target.value});}\n  updateDescription = (event) => {event.preventDefault(); this.setState({description:event.target.value});}\n  updateItems = (event) => {\n    event.preventDefault(); \n    //Make return characters comma seperated and ensure all words are trimmed\n    let allItems = event.target.value.replace(/\\r?\\n/g, \",\").trim().split(\",\");\n    allItems = allItems.map(x => x.trim());\n    this.setState({items:allItems.join(\",\")});\n  }\n  updatePrivate = (event) => {this.setState({private:event.target.checked});}\n\n  render() {\n    if (this.state.saved){\n      return (<ListSaved />);\n    } else {\n      return (\n        <Card>\n          <Card.Body>\n            <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n              <Form.Row>\n                <Form.Group controlId=\"formName\">\n                  <Form.Label>List name</Form.Label>\n                  <Form.Control \n                    placeholder=\"eg Simpson characters\" \n                    required\n                    type=\"text\"\n                    onChange={this.updateName}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    You must select a name\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group controlId=\"formDescription\">\n                  <Form.Label>List description</Form.Label>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows=\"2\"\n                    required\n                    type=\"text\"\n                    onChange={this.updateDescription}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    A short description helps\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group controlId=\"formItems\">\n                  <Form.Label>List items (return or comma)</Form.Label>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows=\"4\"\n                    required\n                    type=\"text\"\n                    onChange={this.updateItems}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Add some list words!\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group id=\"formPrivate\">\n                  <Form.Check \n                    type=\"checkbox\" \n                    checked={this.state.private}\n                    label=\"Tick to keep list private\" \n                    onChange={this.updatePrivate}\n                  />\n                </Form.Group>\n              </Form.Row>\n              <Button type=\"submit\">Save</Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      );\n    }\n\n  }\n}\n\nexport default CreateNewList;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport CreateNewList from './components/CreateNewList'\nimport './App.css';\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>Basic Home Page</Card.Title>\n          <Card.Img variant=\"top\" src='https://pngimage.net/wp-content/uploads/2018/05/edit-a-png-7.png' style={{ width: '18rem' }} />\n          <p>\n            <br />\n            A game of guessing fun for all the family and your crazy friends.\n          </p>\n          <Link to=\"/temp-play\"><Button variant=\"primary\">Play time</Button></Link>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nclass App extends React.Component{\n  render() {\n    return (\n      <Router basename={'/edit'}>\n        <Container>\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand as={Link} to=\"/\">MY Guess Words!</Navbar.Brand>\n            <NavDropdown title=\"Options\" id=\"basic-nav-dropdown\" className=\"nav-item dropdown ml-auto\">\n              <NavDropdown.Item as={Link} to=\"/\">MY Guess Words home</NavDropdown.Item>\n              <NavDropdown.Item as={Link} to=\"/create-new-list\">Create new list</NavDropdown.Item>\n              <NavDropdown.Item href=\"../\">Guess Words Home</NavDropdown.Item>\n            </NavDropdown>\n          </Navbar>\n          {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/create-new-list\">\n              <CreateNewList />\n            </Route>                       \n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}