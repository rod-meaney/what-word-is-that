{"version":3,"sources":["components/Fetching.js","components/ListBase.js","components/ListEdit.js","components/ListCreateNew.js","components/MyLists.js","components/ListSaved.js","App.js","serviceWorker.js","index.js"],"names":["Fetching","props","state","this","loading","message","Spinner","style","animation","React","Component","ListBase","handleSubmit","event","currentTarget","checkValidity","stopPropagation","api","new","setState","saving","fetch","process","method","body","JSON","stringify","then","response","json","jsonData","saved","finally","validated","preventDefault","updateName","name","target","value","updateDescription","description","updateItems","items","updatePrivate","private","checked","loaded_id","parts","window","location","href","split","id","length","that","results","data","catch","error","console","log","to","Card","Body","Form","noValidate","onSubmit","Row","Col","Group","controlId","Label","Control","placeholder","required","type","onChange","Feedback","as","rows","Check","label","Button","ListEdit","ListCreateNew","MyListItem","key","ListGroup","Item","action","className","MyLists","games","map","item","noItems","ListSaved","stdOption","LoggedIn","Title","user","Home","App","auth","returned_user","NavDropdown","Link","basename","Container","Navbar","bg","expand","title","standardOptions","Divider","Brand","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1aeadaeb.chunk.js","sourcesContent":["import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\nclass Fetching extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    if (this.props.loading){\n      return (\n        <div><br /><center><span>{this.props.message}</span> <Spinner style={{\"vertical-align\":\"middle\"}} animation=\"grow\"/></center></div>\n      )\n    } else {\n      return (\"\");\n    }    \n  }\n}\n\nexport default Fetching;","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport {Redirect} from \"react-router-dom\";\nimport Fetching from './Fetching'\n\nclass ListBase extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loaded_id:\"\",\n      validated:false,\n      saved:false,\n      name:\"\",\n      description:\"\",\n      items:\"\",\n      private: false,\n      saving:false\n    }\n  }\n\n  componentDidMount() {\n    //this is when we are updating - not needed for new\n    if (!this.props.new){\n      let parts = window.location.href.split('?id=');\n      let id = parts[parts.length-1];\n      let that = this;\n      fetch(`${process.env.REACT_APP_URL}/${process.env.REACT_APP_SUB_BASE}/api/item?id=${id}`)\n      .then(results => {return results.json()})\n      .then(data => { \n        that.setState({loaded_id: id, \n                        name: data.name, \n                        description: data.description, \n                        items: data.items,\n                        private: data.private});\n      }).catch(function(error) {\n        console.log('Fetch has failed so defaulting in some data for local testing.');\n        let data = {\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACQw\", \"private\": false, \"name\": \"Cats\", \"description\": \"Purrrrrrrrr\", \"items\": \"Abyssinian,Aegean,American Bobtail,American Curl,American Shorthair,American Wirehair,Aphrodite Giant,Arabian Mau,Asian cat,Asian Semi-longhair,Australian Mist,Balinese,Bambino,Bengal,Birman,Bombay,Brazilian Shorthair,British Longhair,British Shorthair,Burmese,Burmilla,California Spangled,Chantilly-Tiffany,Chartreux,Chausie,Colourpoint Shorthair,Cornish Rex,Cymric,Longhaired Manx,Cyprus,Devon Rex,Donskoy,Don Sphynx,Dragon Li,Dwelf,Egyptian Mau,European Shorthair,Exotic Shorthair,Foldex,German Rex,Havana Brown,Highlander,Himalayan,Japanese Bobtail,Javanese,Khao Manee,Korat,Korean Bobtail,Korn Ja,Kurilian Bobtail\\u00a0or,Kuril Islands Bobtail,LaPerm,Lykoi,Maine Coon,Manx,Mekong Bobtail,Minskin,Napoleon,Munchkin,Nebelung,Norwegian Forest Cat,Ocicat,Ojos Azules,Oregon Rex,Oriental Bicolor,Oriental Longhair,Oriental Shorthair,Persian,Peterbald,Pixie-bob,Ragamuffin,Ragdoll,Raas,Russian Blue,Russian White,Black,and Tabby,Sam sawet,Savannah,Scottish Fold,Selkirk Rex,Serengeti,Serrade Petit,Siberian,Neva Masquerade,Singapura,Snowshoe,Sokoke,Somali,Sphynx,Suphalak,Thai,Thai Lilac,Tonkinese,Toyger,Turkish Angora,Turkish Van,Ukrainian Levkoy,Wila Krungthep,York Chocolate\"};\n        that.setState({loaded_id: id, name: data.name, description: data.description, items: data.items, private: data.private});\n      });\n    }\n  }\n\n  handleSubmit = event => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    } else {\n      let api = '/edit/api/update';\n      if (this.props.new) {api = '/edit/api/save';}\n      this.setState({saving:true});\n      fetch(process.env.REACT_APP_URL+api, {\n        method: 'POST',\n        body: JSON.stringify(this.state),\n      }).then((response) => {\n        return response.json();\n      }).then((jsonData) => {\n        this.setState({saved:true});\n      }).finally(()=>{\n        this.setState({saving:false});\n      });\n    }\n    this.setState({validated:true}); //Don't undert=stand how for validation works, but it is nice magic juju\n    event.preventDefault(); //We actually never want it to submit, we handle success in the else branch\n  };\n\n  updateName = (event) => {event.preventDefault(); this.setState({name:event.target.value});}\n  updateDescription = (event) => {event.preventDefault(); this.setState({description:event.target.value});}\n  updateItems = (event) => {event.preventDefault(); this.setState({items:event.target.value});}\n  updatePrivate = (event) => {this.setState({private:event.target.checked});}\n\n  render() {\n    if (this.state.saved){\n      return (<Redirect to=\"/saved\" />);\n    } else {\n      return (\n        <>\n        <Fetching loading={this.state.saving} message=\"Saving..\" />\n        <Card>\n          <Card.Body>\n            <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n              <Form.Row><Col>\n                <Form.Group controlId=\"formName\">\n                  <Form.Label>List name</Form.Label>\n                  <Form.Control \n                    placeholder=\"eg Simpson characters\" \n                    required\n                    type=\"text\"\n                    onChange={this.updateName}\n                    value={this.state.name}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    You must select a name\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Col></Form.Row>\n              <Form.Row><Col>\n                <Form.Group controlId=\"formDescription\">\n                  <Form.Label>List description</Form.Label>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows=\"2\"\n                    required\n                    type=\"text\"\n                    onChange={this.updateDescription}\n                    value={this.state.description}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    A short description helps\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Col></Form.Row>\n              <Form.Row>\n                <Col>\n                <Form.Group controlId=\"formItems\">\n                  <Form.Label>List items (return or comma)</Form.Label>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows=\"4\"\n                    required\n                    type=\"text\"\n                    onChange={this.updateItems}\n                    value={this.state.items}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Add some list words!\n                  </Form.Control.Feedback>\n                </Form.Group>\n                </Col>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group id=\"formPrivate\">\n                  <Form.Check \n                    type=\"checkbox\" \n                    checked={this.state.private}\n                    label=\"Tick to keep list private\" \n                    onChange={this.updatePrivate}\n                  />\n                </Form.Group>\n              </Form.Row>\n              <Button type=\"submit\">Save</Button>\n            </Form>\n          </Card.Body>\n        </Card>\n        </>\n      );\n    }\n  }\n}\n\nexport default ListBase;","import ListBase from './ListBase'\nclass ListEdit extends ListBase {}\nexport default ListEdit;","import ListBase from './ListBase'\nclass ListCreateNew extends ListBase {}\nexport default ListCreateNew;","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\nimport {ChevronRight} from 'react-bootstrap-icons';\n\nclass MyListItem extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      key:this.props.id,\n      description:this.props.description,\n      name:this.props.name,\n      private:this.props.private\n    }\n  } \n  render() {\n    return(\n      <ListGroup.Item action href={`/${process.env.REACT_APP_SUB_BASE}/item?id=${this.state.key}`}>{this.state.name}\n        <span className=\"float-right\"><ChevronRight /></span>\n      </ListGroup.Item>\n    );\n  }\n}\n\nclass MyLists extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      games:[]\n    }\n  }\n\n  componentDidMount(){\n    let that = this;\n    fetch(process.env.REACT_APP_URL+`/${process.env.REACT_APP_SUB_BASE}/api/${this.props.api}`)\n    .then(results => {\n      return results.json()})\n    .then(data => {\n      that.setState({games:data}); \n    }).catch(function(error) {\n      console.log('Fetch has failed so defaulting in some data for local testing.');\n      let data = [{\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACQw\", \"private\": false, \"name\": \"Cats\", \"description\": \"Purrrrrrrrr\"}, {\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACgw\", \"private\": false, \"name\": \"Dogs\", \"description\": \"Doggies\"}];\n      that.setState({games:data}); \n   });\n  }\n\n  noItems() {\n    return this.state.games.length===0?(<ListGroup.Item>Currently no items</ListGroup.Item>):\"\";\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <ListGroup>\n            {this.state.games.map((item) => <MyListItem \n                                              id={item.key}\n                                              key={item.key}\n                                              name={item.name}\n                                              description={item.description}\n                                              private={item.private}\n                                              />)}\n            {this.noItems()}\n          </ListGroup>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default MyLists;","import React from 'react';\nimport Card from 'react-bootstrap/Card'\n\nclass ListSaved extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {}\n  }\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <p>\n          Well Saved!\n          </p>\n          {this.props.stdOption()}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default ListSaved;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Card from 'react-bootstrap/Card'\nimport {PersonFill, List} from 'react-bootstrap-icons'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport ListEdit from './components/ListEdit'\nimport ListCreateNew from './components/ListCreateNew'\nimport './App.css';\nimport MyLists from './components/MyLists';\nimport ListSaved from './components/ListSaved';\n\nclass LoggedIn extends React.Component {\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>Logged in page</Card.Title>\n          <p>\n            You are logged in as {this.props.user}. \n          </p>\n          {this.props.stdOption()}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>WWIT Admin Home</Card.Title>\n          <p>\n            Administration for WWIT (What word is that)\n          </p>\n          {this.props.stdOption()}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      auth:false,\n      user:\"login\"\n    }\n  }  \n\n  componentDidMount(){\n    let that = this;\n    fetch(process.env.REACT_APP_URL+'/api/user')\n    .then(results => {\n      return results.json()})\n    .then(data => {\n      let returned_user = data.response;\n      if (returned_user !== \"anonymous\"){\n        that.setState({\n          auth:true,\n          user: returned_user\n        })\n      }\n    }).catch(function(error) {\n      console.log('Fetch user has failed so assume anonymous - do nothing');\n   });\n  }\n\n  standardOptions(){\n    return (\n      <>\n        <NavDropdown.Item as={Link} to=\"/my-lists\">My lists</NavDropdown.Item>\n        <NavDropdown.Item as={Link} to=\"/create-new-list\">Create new list</NavDropdown.Item>\n        <NavDropdown.Item href=\"../\">Return to play game</NavDropdown.Item>\n      </>);\n  }\n\n  render() {\n    return (\n      <Router basename={`/${process.env.REACT_APP_SUB_BASE}`}>\n        <Container>\n          <Navbar bg=\"light\" expand=\"lg\">\n            <NavDropdown title={<List />} id=\"basic-nav-dropdown\" className=\"nav-item dropdown mr-auto\">\n              {this.standardOptions()}\n              <NavDropdown.Divider />\n              <NavDropdown.Item><PersonFill /> {this.state.user}</NavDropdown.Item>\n            </NavDropdown>\n            <Navbar.Brand as={Link} to=\"/\">WWWiT Admin</Navbar.Brand>\n          </Navbar>\n          {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/create-new-list\">\n              <ListCreateNew \n                stdOption={this.standardOptions} \n                new={true} />\n            </Route>\n            <Route path=\"/item\">\n              <ListEdit \n                stdOption={this.standardOptions} \n                new={false} />\n            </Route>            \n            <Route path=\"/my-lists\">\n              <MyLists api=\"my-lists\" />\n            </Route>            \n            <Route path=\"/logged-in\">\n              <LoggedIn \n                user={this.state.user} \n                stdOption={this.standardOptions}\n                />\n            </Route> \n            <Route path=\"/saved\">\n              <ListSaved \n                stdOption={this.standardOptions}\n                />\n            </Route>                                             \n            <Route path=\"/\">\n              <Home stdOption={this.standardOptions} />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}