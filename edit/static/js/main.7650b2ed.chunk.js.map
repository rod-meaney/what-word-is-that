{"version":3,"sources":["components/ListBase.js","components/ListEdit.js","components/ListCreateNew.js","components/MyLists.js","components/ListSaved.js","App.js","serviceWorker.js","index.js"],"names":["ListBase","props","handleSubmit","event","currentTarget","checkValidity","stopPropagation","api","new","fetch","process","method","body","JSON","stringify","state","then","response","json","jsonData","setState","saved","validated","preventDefault","updateName","name","target","value","updateDescription","description","updateItems","items","updatePrivate","private","checked","loaded_id","this","parts","window","location","href","split","id","length","that","results","data","catch","error","console","log","to","Card","Body","Form","noValidate","onSubmit","Row","Col","Group","controlId","Label","Control","placeholder","required","type","onChange","Feedback","as","rows","Check","label","Button","React","Component","ListEdit","ListCreateNew","MyListItem","key","ListGroup","Item","className","MyLists","games","map","item","noItems","ListSaved","stdOption","LoggedIn","Title","user","Home","App","auth","returned_user","NavDropdown","Link","basename","Container","Navbar","bg","expand","title","standardOptions","Divider","Brand","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7650b2ed.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport {Redirect} from \"react-router-dom\";\n\nclass ListBase extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loaded_id:\"\",\n      validated:false,\n      saved:false,\n      name:\"\",\n      description:\"\",\n      items:\"\",\n      private: false\n    }\n  }\n\n  componentDidMount() {\n    //this is when we are updating - not needed for new\n    if (!this.props.new){\n      let parts = window.location.href.split('?id=');\n      let id = parts[parts.length-1];\n      let that = this;\n      fetch(`${process.env.REACT_APP_URL}/${process.env.REACT_APP_SUB_BASE}/api/item?id=${id}`)\n      .then(results => {return results.json()})\n      .then(data => { \n        that.setState({loaded_id: id, \n                        name: data.name, \n                        description: data.description, \n                        items: data.items,\n                        private: data.private});\n      }).catch(function(error) {\n        console.log('Fetch has failed so defaulting in some data for local testing.');\n        let data = {\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACQw\", \"private\": false, \"name\": \"Cats\", \"description\": \"Purrrrrrrrr\", \"items\": \"Abyssinian,Aegean,American Bobtail,American Curl,American Shorthair,American Wirehair,Aphrodite Giant,Arabian Mau,Asian cat,Asian Semi-longhair,Australian Mist,Balinese,Bambino,Bengal,Birman,Bombay,Brazilian Shorthair,British Longhair,British Shorthair,Burmese,Burmilla,California Spangled,Chantilly-Tiffany,Chartreux,Chausie,Colourpoint Shorthair,Cornish Rex,Cymric,Longhaired Manx,Cyprus,Devon Rex,Donskoy,Don Sphynx,Dragon Li,Dwelf,Egyptian Mau,European Shorthair,Exotic Shorthair,Foldex,German Rex,Havana Brown,Highlander,Himalayan,Japanese Bobtail,Javanese,Khao Manee,Korat,Korean Bobtail,Korn Ja,Kurilian Bobtail\\u00a0or,Kuril Islands Bobtail,LaPerm,Lykoi,Maine Coon,Manx,Mekong Bobtail,Minskin,Napoleon,Munchkin,Nebelung,Norwegian Forest Cat,Ocicat,Ojos Azules,Oregon Rex,Oriental Bicolor,Oriental Longhair,Oriental Shorthair,Persian,Peterbald,Pixie-bob,Ragamuffin,Ragdoll,Raas,Russian Blue,Russian White,Black,and Tabby,Sam sawet,Savannah,Scottish Fold,Selkirk Rex,Serengeti,Serrade Petit,Siberian,Neva Masquerade,Singapura,Snowshoe,Sokoke,Somali,Sphynx,Suphalak,Thai,Thai Lilac,Tonkinese,Toyger,Turkish Angora,Turkish Van,Ukrainian Levkoy,Wila Krungthep,York Chocolate\"};\n        that.setState({loaded_id: id, name: data.name, description: data.description, items: data.items, private: data.private});\n      });\n    }\n  }\n\n  handleSubmit = event => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    } else {\n      let api = '/edit/api/update';\n      if (this.props.new) {api = '/edit/api/save';}\n      fetch(process.env.REACT_APP_URL+api, {\n        method: 'POST',\n        body: JSON.stringify(this.state),\n      }).then((response) => {\n        return response.json();\n      }).then((jsonData) => {\n        this.setState({saved:true});\n      });\n    }\n    this.setState({validated:true}); //Don't undert=stand how for validation works, but it is nice magic juju\n    event.preventDefault(); //We actually never want it to submit, we handle success in the else branch\n  };\n\n  updateName = (event) => {event.preventDefault(); this.setState({name:event.target.value});}\n  updateDescription = (event) => {event.preventDefault(); this.setState({description:event.target.value});}\n  updateItems = (event) => {event.preventDefault(); this.setState({items:event.target.value});}\n  updatePrivate = (event) => {this.setState({private:event.target.checked});}\n\n  render() {\n    if (this.state.saved){\n      return (<Redirect to=\"/saved\" />);\n    } else {\n      return (\n        <Card>\n          <Card.Body>\n            <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n              <Form.Row><Col>\n                <Form.Group controlId=\"formName\">\n                  <Form.Label>List name</Form.Label>\n                  <Form.Control \n                    placeholder=\"eg Simpson characters\" \n                    required\n                    type=\"text\"\n                    onChange={this.updateName}\n                    value={this.state.name}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    You must select a name\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Col></Form.Row>\n              <Form.Row><Col>\n                <Form.Group controlId=\"formDescription\">\n                  <Form.Label>List description</Form.Label>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows=\"2\"\n                    required\n                    type=\"text\"\n                    onChange={this.updateDescription}\n                    value={this.state.description}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    A short description helps\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Col></Form.Row>\n              <Form.Row>\n                <Col>\n                <Form.Group controlId=\"formItems\">\n                  <Form.Label>List items (return or comma)</Form.Label>\n                  <Form.Control \n                    as=\"textarea\" \n                    rows=\"4\"\n                    required\n                    type=\"text\"\n                    onChange={this.updateItems}\n                    value={this.state.items}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Add some list words!\n                  </Form.Control.Feedback>\n                </Form.Group>\n                </Col>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group id=\"formPrivate\">\n                  <Form.Check \n                    type=\"checkbox\" \n                    checked={this.state.private}\n                    label=\"Tick to keep list private\" \n                    onChange={this.updatePrivate}\n                  />\n                </Form.Group>\n              </Form.Row>\n              <Button type=\"submit\">Save</Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      );\n    }\n  }\n}\n\nexport default ListBase;","import ListBase from './ListBase'\nclass ListEdit extends ListBase {}\nexport default ListEdit;","import ListBase from './ListBase'\nclass ListCreateNew extends ListBase {}\nexport default ListCreateNew;","import React from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport {Link} from 'react-router-dom';\nimport Card from 'react-bootstrap/Card';\nimport {ChevronRight} from 'react-bootstrap-icons';\n\nclass MyListItem extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      key:this.props.id,\n      description:this.props.description,\n      name:this.props.name,\n      private:this.props.private\n    }\n  } \n  render() {\n    return(\n      <ListGroup.Item>{this.state.name}\n        <span className=\"float-right\">\n        <Link to={`/item?id=${this.state.key}`}>\n          <ChevronRight />\n          </Link>\n        </span>\n      </ListGroup.Item>\n      \n    );\n  }\n}\n\nclass MyLists extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      games:[]\n    }\n  }\n\n  componentDidMount(){\n    let that = this;\n    fetch(process.env.REACT_APP_URL+`/${process.env.REACT_APP_SUB_BASE}/api/${this.props.api}`)\n    .then(results => {\n      return results.json()})\n    .then(data => {\n      that.setState({games:data}); \n    }).catch(function(error) {\n      console.log('Fetch has failed so defaulting in some data for local testing.');\n      let data = [{\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACQw\", \"private\": false, \"name\": \"Cats\", \"description\": \"Purrrrrrrrr\"}, {\"key\": \"aghkZXZ-Tm9uZXIRCxIETGlzdBiAgICAgICACgw\", \"private\": false, \"name\": \"Dogs\", \"description\": \"Doggies\"}];\n      that.setState({games:data}); \n   });\n  }\n\n  noItems() {\n    return this.state.games.length===0?(<ListGroup.Item>Currently no items</ListGroup.Item>):\"\";\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <ListGroup>\n            {this.state.games.map((item) => <MyListItem \n                                              id={item.key}\n                                              key={item.key}\n                                              name={item.name}\n                                              description={item.description}\n                                              private={item.private}\n                                              />)}\n            {this.noItems()}\n          </ListGroup>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default MyLists;","import React from 'react';\nimport Card from 'react-bootstrap/Card'\n\nclass ListSaved extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {}\n  }\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <p>\n          Well Saved!\n          </p>\n          {this.props.stdOption()}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default ListSaved;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Card from 'react-bootstrap/Card'\nimport {PersonFill, Gear} from 'react-bootstrap-icons'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport ListEdit from './components/ListEdit'\nimport ListCreateNew from './components/ListCreateNew'\nimport './App.css';\nimport MyLists from './components/MyLists';\nimport ListSaved from './components/ListSaved';\n\nclass LoggedIn extends React.Component {\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>Logged in page</Card.Title>\n          <p>\n            You are logged in as {this.props.user}. \n          </p>\n          {this.props.stdOption()}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>WWIT Admin Home</Card.Title>\n          <p>\n            Administration for WWIT (What word is that)\n          </p>\n          {this.props.stdOption()}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      auth:false,\n      user:\"login\"\n    }\n  }  \n\n  componentDidMount(){\n    let that = this;\n    fetch(process.env.REACT_APP_URL+'/api/user')\n    .then(results => {\n      return results.json()})\n    .then(data => {\n      let returned_user = data.response;\n      if (returned_user !== \"anonymous\"){\n        that.setState({\n          auth:true,\n          user: returned_user\n        })\n      }\n    }).catch(function(error) {\n      console.log('Fetch user has failed so assume anonymous - do nothing');\n   });\n  }\n\n  standardOptions(){\n    return (\n      <>\n        <NavDropdown.Item as={Link} to=\"/my-lists\">My lists</NavDropdown.Item>\n        <NavDropdown.Item as={Link} to=\"/create-new-list\">Create new list</NavDropdown.Item>\n        <NavDropdown.Item href=\"../\">Return to play game</NavDropdown.Item>\n      </>);\n  }\n\n  render() {\n    return (\n      <Router basename={`/${process.env.REACT_APP_SUB_BASE}`}>\n        <Container>\n          <Navbar bg=\"light\" expand=\"lg\">\n            <NavDropdown title={<Gear />} id=\"basic-nav-dropdown\" className=\"nav-item dropdown mr-auto\">\n              {this.standardOptions()}\n              <NavDropdown.Divider />\n              <NavDropdown.Item><PersonFill /> {this.state.user}</NavDropdown.Item>\n            </NavDropdown>\n            <Navbar.Brand as={Link} to=\"/\">WWWiT Admin</Navbar.Brand>\n          </Navbar>\n          {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/create-new-list\">\n              <ListCreateNew \n                stdOption={this.standardOptions} \n                new={true} />\n            </Route>\n            <Route path=\"/item\">\n              <ListEdit \n                stdOption={this.standardOptions} \n                new={false} />\n            </Route>            \n            <Route path=\"/my-lists\">\n              <MyLists api=\"my-lists\" />\n            </Route>            \n            <Route path=\"/logged-in\">\n              <LoggedIn \n                user={this.state.user} \n                stdOption={this.standardOptions}\n                />\n            </Route> \n            <Route path=\"/saved\">\n              <ListSaved \n                stdOption={this.standardOptions}\n                />\n            </Route>                                             \n            <Route path=\"/\">\n              <Home stdOption={this.standardOptions} />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}